#!/bin/python

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from distgen.generator import Generator

description = \
"""
Generate script using predefined metadata about distribution and templates.

As an example of 'dg' usage, to generate _Dockerfile_ for Fedora 21 64-bit
system, you may use command(s):

 $ cd project/directory
 $ dg --spec      docker-data.yaml      \\
      --template  docker.tpl            \\
      --distro    fedora-21-x86_64.yaml
"""

def parse_args():
    parser = ArgumentParser(
        description=description,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '--projectdir',
        metavar='PROJECT',
        type=str,
        help='directory with project (defaults to CWD)',
        default="."
    )

    parser.add_argument(
        '--distro',
        metavar='DIST',
        type=str,
        help='Use distribution metadata specified by DIST yaml file',
        default="fedora-21-x86_64.yaml",
    )

    parser.add_argument(
        '--template',
        metavar='TEMPLATE',
        type=str,
        help='Use TEMPLATE file, e.g. docker.tpl'
    )

    parser.add_argument(
        '--spec',
        metavar='SPEC',
        type=str,
        help='Use SPEC yaml file to fill the TEMPLATE file.'
    )

    return parser.parse_args()


def main():
    args = parse_args()

    required_opt_fail = False
    for i in ["template", "spec"]:
        if not getattr(args, i):
            print "you must specify --" + i
            required_opt_fail = True

    if required_opt_fail:
        return 1

    generator = Generator()
    generator.load_project(args.projectdir)
    generator.render(
        args.spec,
        args.template,
        args.distro,
    )


if __name__ == "__main__":
    main()
